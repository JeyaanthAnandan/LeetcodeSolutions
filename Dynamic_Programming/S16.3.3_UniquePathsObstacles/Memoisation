class Solution {
public:
    int f(int i,int j,int m,int n,vector<vector<int>>& obs,vector<vector<int>>& dp){
        if(i>=m || j>=n)return 0;
        if(obs[i][j]==1)return 0;
        if(i==m-1 && j==n-1){
            return 1;
        }
        if(dp[i][j]!=-1)return dp[i][j];

        int l = f(i+1,j,m,n,obs,dp);
        int r = f(i,j+1,m,n,obs,dp);

        return dp[i][j]=l+r;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.size()==1 && obstacleGrid[0].size()==1 && obstacleGrid[0][0]==1){
            return 0;
        }
        if(obstacleGrid.size()==1 && obstacleGrid[0].size()==1){
            return 1;
        }
        vector<vector<int>>dp;
        for(int i=0;i<obstacleGrid.size();i++){
            vector<int>temp(obstacleGrid[0].size(),-1);
            dp.emplace_back(temp);
        }
        return f(0,0,obstacleGrid.size(),obstacleGrid[0].size(),obstacleGrid,dp);    
    }
};
